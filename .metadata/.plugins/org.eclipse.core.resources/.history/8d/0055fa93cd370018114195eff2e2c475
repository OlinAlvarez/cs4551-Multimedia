/*******************************************************
 CS4551 Multimedia Software Systems
 @ Author: Olin-Mao Alvarez 
 *******************************************************/
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Scanner;
import java.io.*;
import java.lang.Math;
import java.nio.charset.Charset;
public class CS4551_Alvarez{ 
	static Scanner in = new Scanner(System.in);
	static int Original_Width;
	static int Original_Height;
	public static void main(String[] args) throws IOException{
	if(args.length != 1){
	  usage();
	  System.exit(1);
	}
	Image img = new Image(args[0]);

		if(img.getH() % 8 != 0  || img.getW() % 8 != 0) {
			img = resize(img);
		}
	
		ArrayList<float[][]> ycbcr = (ArrayList<float[][]>) RGB2YCvCr(img);
		float[][] y =  ycbcr.get(0);
		float[][] cb =  ycbcr.get(1);
		float[][] cr=  ycbcr.get(2);
		/*
		if(Original_Height % 8 != 0  || Original_Width % 8 != 0) {
			revertDimensions(img);
		}
		
		float[][] y =  ycbcr.get(0);
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				System.out.print(ycbcr.get(0)[x][y]);
			}
			System.out.println();
		}
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				System.out.print(ycbcr.get(1)[x][y]);
			}
			System.out.println();
		}		
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				System.out.print(ycbcr.get(2)[x][y]);
			}
			System.out.println();
		}
		*/
	}

	public static void usage(){
		System.out.println("\nUsage: java CS4551_Main [input_ppm_file]\n");
	}
	public static Image resize(Image img) {
		
		int width = img.getW();
		int height = img.getH();
		Original_Width = width;
		Original_Height = height;
		
		width += 8 - width % 8;
		height += 8 - height % 8;
		int[] black = {0,0,0};
		int[] pixelValue = new int[3];
		
		Image resizedImage =  new Image(width,height);
		
		for(int x = 0; x < width; x++) {
			for(int y = 0; y < height; y++) {
				if( x < img.getW() && y < img.getH()) {
					img.getPixel(x, y, pixelValue);
					resizedImage.setPixel(x, y, pixelValue);
				}else {
					resizedImage.setPixel(x, y, black);
				}
			}
		}
		resizedImage.display();
		return resizedImage;
	}

	public static Image revertDimensions(Image img) {
		Image resize = new Image(Original_Width, Original_Height);
		int[] pixel = new int[3];
		for(int x = 0; x < Original_Width; x++) {
			for (int y = 0; y < Original_Height; y++) {
				img.getPixel(x, y, pixel);
				resize.setPixel(x, y, pixel);
			}
		}	
		resize.display();
		return resize;
	}
	//store YCvCr in 2d float array
	public static List<float[][]> RGB2YCvCr(Image img) {
		float Y = 0;
		float Cb = 0;
		float Cr = 0;
		float[][] y_chan = new float[img.getW()][img.getH()];
		float[][] cb_chan= new float[img.getW()][img.getH()];
		float[][] cr_chan = new float[img.getW()][img.getH()];	
		int[] rgb = new int[3];
		
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				img.getPixel(x, y, rgb);
				Y  = (float) (0.2990 * rgb[0] + 0.5870 * rgb[1] + 0.1140 * rgb[2]);
				Cb = (float) (-0.1687 * rgb[0] + -0.3313 * rgb[1] + 0.5000 * rgb[2]);
				Cr = (float) (0.5000 * rgb[0] + -0.4187 * rgb[1] + -0.0813 * rgb[2]);
				
				truncate(Y,Cb,Cr);
				Y -= 128;
				Cb -= 0.5;
				Cr -= 0.5;
				
				y_chan[x][y] = Y;
				cb_chan[x][y] = Cb;
				cr_chan[x][y] = Cr;
			}
		}
		
		List<float[][]> list = new ArrayList<>();
		list.add(y_chan);
		list.add(cb_chan);
		list.add(cr_chan);
		
		return list; 
	}

	public static void truncate(float y,float cb,float cr){
		if(y < 0)
			y = 0;
		if(y > 255)
			y = 255;
		if(cb > 127.5)
			cb = (float) 127.5;
		if(cb < -127.5)
			cb = (float) -127.5;
		if(cr > 127.5)
			cr = (float) 127.5;
		if(cr < -127.5)
			cr = (float) -127.5;
		
	}

	public static void dct(Image img) {
		
	}
}