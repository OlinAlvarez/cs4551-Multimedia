/*******************************************************
G CS4551 Multimedia Software Systems
 @ Author: Olin-Mao Alvarez 
 *******************************************************/
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.io.*;
import java.lang.Math;
import java.nio.charset.Charset;
public class CS4551_Alvarez{ 

	static Scanner in = new Scanner(System.in);
	static int Original_Width;
	static int Original_Height;
	static int n;

	public static void main(String[] args) throws IOException{
	if(args.length != 1){
	  usage();
	  System.exit(1);
	}
	Image img = new Image(args[0]);

		if(img.getH() % 8 != 0  || img.getW() % 8 != 0) {
			img = resize(img);
		}
	
		ArrayList<float[][]> ycbcr = (ArrayList<float[][]>) RGB2YCvCr(img);
		float[][] y_mtx =  ycbcr.get(0);
		float[][] cb_mtx =  ycbcr.get(1);
		float[][] cr_mtx =  ycbcr.get(2);
		
		img.display();
		/*
		if(Original_Height % 8 != 0  || Original_Width % 8 != 0) {
			revertDimensions(img);
		}
		*/
		Image yimg = new Image(img.getW(),img.getH());
		Image cbimg = new Image(img.getW(),img.getH());
		Image crimg = new Image(img.getW(),img.getH());
		int[] pixel = new int[3];
		
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				pixel[0] =(int) y_mtx[x][y];
				pixel[1] =(int) y_mtx[x][y];
				pixel[2] =(int) y_mtx[x][y];
				
				yimg.setPixel(x, y, pixel);

				pixel[0] =(int) cb_mtx[x][y];
				pixel[1] =(int) cb_mtx[x][y];
				pixel[2] =(int) cb_mtx[x][y];

				cbimg.setPixel(x, y, pixel);

				pixel[0] =(int) cr_mtx[x][y];
				pixel[1] =(int) cr_mtx[x][y];
				pixel[2] =(int) cr_mtx[x][y];

				crimg.setPixel(x, y, pixel);
			}
		}
		yimg.display();
		//cbimg.display();
		//crimg.display();
		
		YCvCr2RGB(y_mtx, cb_mtx, cr_mtx);
	}

	public static void usage(){
		System.out.println("\nUsage: java CS4551_Main [input_ppm_file]\n");
	}
	public static Image resize(Image img) {
		
		int width = img.getW();
		int height = img.getH();
		Original_Width = width;
		Original_Height = height;
		
		width += 8 - width % 8;
		height += 8 - height % 8;
		int[] black = {0,0,0};
		int[] pixelValue = new int[3];
		
		Image resizedImage =  new Image(width,height);
		
		for(int x = 0; x < width; x++) {
			for(int y = 0; y < height; y++) {
				if( x < img.getW() && y < img.getH()) {
					img.getPixel(x, y, pixelValue);
					resizedImage.setPixel(x, y, pixelValue);
				}else {
					resizedImage.setPixel(x, y, black);
				}
			}
		}
		resizedImage.display();
		return resizedImage;
	}

	public static Image revertDimensions(Image img) {
		Image resize = new Image(Original_Width, Original_Height);
		int[] pixel = new int[3];
		for(int x = 0; x < Original_Width; x++) {
			for (int y = 0; y < Original_Height; y++) {
				img.getPixel(x, y, pixel);
				resize.setPixel(x, y, pixel);
			}
		}	
		resize.display();
		return resize;
	}
	//store YCvCr in 2d float array
	public static List<float[][]> RGB2YCvCr(Image img) {
		float Y = 0;
		float Cb = 0;
		float Cr = 0;
		float[][] yChan = new float[img.getW()][img.getH()];
		float[][] cbChan= new float[img.getW()][img.getH()];
		float[][] crChan = new float[img.getW()][img.getH()];	
		int[] rgb = new int[3];
		
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				img.getPixel(x, y, rgb);
				
				Y  = (float) (0.2990 * rgb[2] + 0.5870 * rgb[1] + 0.1140 * rgb[0]);
				Cb = (float) (-0.1687 * rgb[2] + -0.3313 * rgb[1] + 0.5000 * rgb[0]);
				Cr = (float) (0.5000 * rgb[2] + -0.4187 * rgb[1] + -0.0813 * rgb[0]);
				
				truncate(Y,Cb,Cr);
				Y -= 128;
				Cb -= 0.5;
				Cr -= 0.5;
				yChan[x][y] = Y;
				cbChan[x][y] = Cb;
				crChan[x][y] = Cr;
			}
		}
		
		List<float[][]> list = new ArrayList<>();
		list.add(yChan);
		list.add(cbChan);
		list.add(crChan);
		
		float[][] cbSubsample = subsample(cbChan);
		float[][] crSubsample = subsample(crChan);
		int cbWidth = cbSubsample.length;
		int cbDepth = cbSubsample[0].length;
		int crWidth = crSubsample.length;
		int crDepth = crSubsample[0].length;
		int yWidth = yChan.length;
		int yDepth = yChan[0].length;
		
		if(cbSubsample.length %8 != 0 || cbSubsample[0].length % 8 != 0) cbSubsample = resizeChannel(cbSubsample);
		if(crSubsample.length %8 != 0 || crSubsample[0].length % 8 != 0) crSubsample = resizeChannel(crSubsample);
		if(yChan.length %8 != 0 || yChan[0].length % 8 != 0) yChan = resizeChannel(yChan);
		
		float[][] yDct = dct(yChan);
		float[][] cbDct = dct(cbSubsample);
		float[][] crDct = dct(crSubsample);
		
		float[][] yRevert = inverseDct(yDct,yWidth,yDepth);
		float[][] cbRevert = inverseDct(cbDct,cbWidth,cbDepth);
		float[][] crRevert = inverseDct(crDct,crWidth,crDepth);
			
		if(!yRevert.equals(yChan))
			System.out.println("y channel is not the same after dct");
		if(!cbRevert.equals(cbChan))
			System.out.println("cb channel is not the same after dct");
		if(!crRevert.equals(crChan))
			System.out.println("cr channel is not the same after dct");
		return list; 
	}
	
	public static Image YCvCr2RGB(float[][] Y, float[][] Cb, float[][] Cr) {
		Image img = new Image(Y.length, Y[0].length);
		int[] pixel = new int[3];
		int r,g,b;
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				
				r = (int)((Y[x][y] + 128) + (1.402 * Cr[x][y]));
				g = (int)((Y[x][y] + 128) - (0.344 * Cb[x][y]) - (0.714*Cr[x][y]));
				b = (int)((Y[x][y] + 128) + (1.772 * Cb[x][y]));
				
				truncate(r);
				truncate(g);
				truncate(b);
				
				pixel[0] = b;
				pixel[1] = g;
				pixel[2] = r;
				
				img.setPixel(x, y, pixel);
			}
		}
		img.display();
		return img;
	}
	
	public static float[][] dct(float[][] channel) {
		
		/*
		 * This is where the actual DCT begins
		 */
		
		float cu, cv, sumx =(float) 0.0, sumy =(float) 0.0;
		float[][] block = new float[8][8];
		float[][] dct =  new float[channel.length][channel[0].length];
		int blockRow = 0, blockCol = 0;
		
		while(blockRow < channel.length && blockCol < channel[0].length) {
				
			for(int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					block[i][j] =  channel[blockRow + i][blockCol + j];
				}
			}
			
			printMatrix(block);
 				
			for(int u = 0; u < 8; u++) {
				if(u == 0) cu = (float) Math.sqrt(2) / 2;
				else cu = 1;

				for(int v = 0; v < 8; v++) {
				if(v == 0) cv = (float) Math.sqrt(2) / 2;
				else cv = 1;
					sumx = (float) 0.0;
					for(int x = 0; x < 8; x++) {
						sumy = (float) 0.0;
						for(int y = 0; y < 8; y++) {
							sumy += block[x][y] * Math.cos(((2 * x + 1) * u * Math.PI ) / 16 ) * Math.cos( ((2 * y + 1) * v * Math.PI ) / 16); 
						}
						sumx += sumy;
					}
					dct[blockRow + u][blockCol + v] = (float) (cu * cv * sumx) / 4;
				}
			}
			blockRow += 8;
			if(blockRow > channel.length) {
				blockRow = 0;
				blockCol += 8;
			}
		
		}
		return dct;
	}
	public static float[][] inverseDct(float[][] channel, int previousWidth, int previousDepth) {
		float cu, cv, sumx =(float) 0.0, sumy =(float) 0.0;
		float[][] block = new float[8][8];
		float[][] dct =  new float[channel.length][channel[0].length];
		int blockRow = 0, blockCol = 0;
		
		while(blockRow < channel.length && blockCol < channel[0].length) {
				
			for(int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					block[i][j] =  channel[blockRow + i][blockCol + j];
				}
			}	
			//CS4551_Alvarez.printMatrix(block); 			
			for(int u = 0; u < 8; u++) {
				if(u == 0) cu = (float) Math.sqrt(2) / 2;
				else cu = 1;

				for(int v = 0; v < 8; v++) {
				if(v == 0) cv = (float) Math.sqrt(2) / 2;
				else cv = 1;
					sumx = (float) 0.0;
					for(int x = 0; x < 8; x++) {
						sumy = (float) 0.0;
						for(int y = 0; y < 8; y++) {
							sumy += block[x][y] *(cu * cv) / 4 * Math.cos(((2 * x + 1) * u * Math.PI ) / 16 ) * Math.cos( ((2 * y + 1) * v * Math.PI ) / 16);	
						}
						sumx += sumy;
					}
					dct[blockRow + u][blockCol + v] = sumx;
				}
			}
			blockRow += 8;
			if(blockRow > channel.length) {
				blockRow = 0;
				blockCol += 8;
			}
		
		}
		return dct;
	}
	
	public static int[][] quantization(float[][] dctBlock, boolean isLuma){
		do {
			System.out.println(" Enter an n value for compression");
			n = in.nextInt();
		}while( n > 5 || n < 0);
		
		
		int[][] lumaTable = {{4,4,4,8,8,16,16,32},
							 {4,4,4,8,8,16,16,32},
							 {4,4,8,8,16,16,32,32},
							 {8,8,8,16,16,32,32,32},
							 {8,8,16,16,32,32,32,32},
							 {16,16,16,32,32,32,32,32},
							 {16,16,32,32,32,32,32,32},
							 {32,32,32,32,32,32,32,32}};
		
		int[][] chromaTable =  {{8,8,8,16,32,32,32,32},
								{8,8,8,16,32,32,32,32},
								{8,8,16,32,32,32,32,32},
								{16,16,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32}};
		int[][] table;
		if(isLuma)	table = lumaTable;
		else table = chromaTable;
		
		int[][] quantTable = new int[8][8];
		
		int power = (int) Math.pow(2, n);
		for(int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				quantTable[i][j] =(int) Math.round( dctBlock[i][j] / (table[i][j] * power));
			}
		}
		return quantTable;
	}
	public static float[][] dequantization(int[][] quantBlock, boolean isLuma){
				
		
		int[][] lumaTable = {{4,4,4,8,8,16,16,32},
							 {4,4,4,8,8,16,16,32},
							 {4,4,8,8,16,16,32,32},
							 {8,8,8,16,16,32,32,32},
							 {8,8,16,16,32,32,32,32},
							 {16,16,16,32,32,32,32,32},
							 {16,16,32,32,32,32,32,32},
							 {32,32,32,32,32,32,32,32}};
		
		int[][] chromaTable =  {{8,8,8,16,32,32,32,32},
								{8,8,8,16,32,32,32,32},
								{8,8,16,32,32,32,32,32},
								{16,16,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32},
								{32,32,32,32,32,32,32,32}};
		int[][] table;
		if(isLuma)	table = lumaTable;
		else table = chromaTable;
		
		float[][] dequantTable = new float[8][8];
		
		int power = (int) Math.pow(2, n);
		for(int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				dequantTable[i][j] = quantBlock[i][j] * (table[i][j] * power);
			}
		}
		return dequantTable;
	}
	/*
	public static int[][] encode(int[][] dctBlock){
		HashMap<Integer,Integer> map = new HashMap<>();
		int row = 0, col = 0;
	    for (int line = 1; line <= (row + col - 1); line++) {
	 
	    // Get column index of the first element in this
	    // line of output.The index is 0 for first row
	    // lines and line - row for remaining lines
	    int start_col = Math.max(0, line - row);
	 
	    // Get count of elements in this line. The count
	    // of elements is equal to minimum of line number,
	    // col-start_col and row 
	    int count = Math.min(line, (col - start_col), row);
	 
	    // Print elements of this line 
	    for (int j = 0; j < count; j++)
	        System.out.print(matrix[min(row, line) - j - 1]
	                            [start_col + j] + " ");
	    }
	 
	}*/
    public static void encode(int[][] block) {

        int m = block.length;
        int n = block[0].length;
        int t = 0;
        ArrayList<Integer[]> encoding = new ArrayList<>();
        
        int prev = block[0][0];
        int runLength = 1;
        Integer[] currentRun =  new Integer[2];
        
        for (int i = 0; i < 16 - 1; i++) {
            if (i % 2 == 1) {
                int x = i < 8 ? 0 : i - 8 + 1;
                int y = i < 8 ? i : 8 - 1;
                while (x < 8 && y >= 0 ) {
                	if(block[x][y] == prev) {
                		runLength++;
                	}else {
                		currentRun = new Integer[2];
                		currentRun[0] = prev;
                		currentRun[1] = runLength;
                		System.out.println("prev " + prev + " curr " + block[x][y]);
                		encoding.add(currentRun);
                		prev =  block[x][y];
                		runLength = 1;
                	}
                	x++;
                	y--;
                }
            } else {
                // up right
                int x = i < 8 ? i : 8 - 1;
                int y = i < 8 ? 0 : i - 8 + 1;
                while (x >= 0 && y < 8) {
                    if(block[x][y] == prev) {
                		runLength++;
                	}else {
                		currentRun = new Integer[2];
                		currentRun[0] = prev;
                		currentRun[1] = runLength;
                		System.out.println("prev " + prev + " curr " + block[x][y]);
                		encoding.add(currentRun);
                		prev =  block[x][y];
                		runLength = 1;
                	}
                	x--;
                	y++;
                }
            }
        }
        currentRun[0] = prev;
        currentRun[1] = runLength;
		System.out.println("encoding");
		encoding.get(0)[1]--;
		for(int i = 0; i < encoding.size(); i++) {
			System.out.println(encoding.get(i)[0] + "," + encoding.get(i)[1] );
		}
        System.out.println();
    }
	public static float[][] resizeChannel(float[][] channel ){
		
	
		int depth =  channel.length;
		int width =  channel[0].length;
		System.out.println("depth " + depth + " width " + width);
		if(depth % 8 != 0) depth += 8 - (depth  % 8);
		if(width % 8 != 0) width += 8 - (width  % 8);
		System.out.println("depth " + depth + " width " + width);
		
		float[][] res = new float[depth][width];
		
		for(int i = 0; i < depth; i++) {
			for (int j = 0; j < width; j++) {
				if( j >= channel[0].length || i >= channel.length ) {
					res[i][j] = 0;
				}
				else {
					res[i][j] = channel[i][j];
				}
			}
		}
		return res;
		
	}
	public static float[][] subsample(float[][] channel){
		/* 
		 * averages by indexing to every other element of the matrix then
		 * summing that element and it's three neighbours and dividing by 4
		 * */
		float[][] sub = new float[channel.length / 2][channel[0].length / 2];
		int row = 0, col = 0;
		float avg = 0;
		for(int i = 0; i < channel.length - 1; i += 2) {
			col = 0;
			for(int j = 0; j < channel[0].length - 1; j += 2) {
				avg =  channel[i][j] + channel[i+1][j] + channel[i][j + 1] + channel[i + 1][j + 1];
				avg /= 4;
				sub[row][col++] = avg;
			}
			row++;
			
		}
		return sub;
	}	
	public static void printMatrix(float[][] mtx) {
		for(int i = 0; i < mtx.length; i++) {
			for(int j = 0; j < mtx[i].length; j++) {
				System.out.printf("%.2f ", mtx[i][j]);
			}
			System.out.println();
		}
		System.out.println();
	}	
	public static void printMatrix(int[][] mtx) {
		for(int i = 0; i < mtx.length; i++) {
			for(int j = 0; j < mtx[i].length; j++) {
				System.out.printf(mtx[i][j]+ " ");
			}
			System.out.println();
		}
		System.out.println();
	}	
	/*
	public static void writeMatrix(float[][] jmtx) throws IOException {
		File verificationFile = new File("Algorithm_verification.txt");
		FileWriter fw = new FileWriter(verificationFile);
		BufferedWriter bw = new BufferedWriter(fw);
		bw.write("------------------------------------------------------------------------------\n");
		for(int i = 0; i < mtx.length; i++) {
			for(int j = 0; j < mtx[i].length; j++) {
				bw.write(mtx[i][j] + " | ");
			}
			bw.write("------------------------------------------------------------------------------\n");
		}
	}*/
	public static void truncate(float y,float cb,float cr){
		if(y < 0)
			y = 0;
		if(y > 255)
			y = 255;
		if(cb > 127.5)
			cb = (float) 127.5;
		if(cb < -127.5)
			cb = (float) -127.5;
		if(cr > 127.5)
			cr = (float) 127.5;
		if(cr < -127.5)
			cr = (float) -127.5;
	}
	public static void truncate(int num){
		if(num < 0)
			num = 0;
		if(num > 255)
			num = 255;
	}
}