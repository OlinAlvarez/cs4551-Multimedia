/*******************************************************
 CS4551 Multimedia Software Systems
 @ Author: Olin-Mao Alvarez 
 *******************************************************/
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Scanner;
import java.io.*;
import java.lang.Math;
import java.nio.charset.Charset;
public class CS4551_Alvarez{ 
	static Scanner in = new Scanner(System.in);
	static int Original_Width;
	static int Original_Height;
	public static void main(String[] args) throws IOException{
	if(args.length != 1){
	  usage();
	  System.exit(1);
	}
	Image img = new Image(args[0]);

		if(img.getH() % 8 != 0  || img.getW() % 8 != 0) {
			img = resize(img);
		}
	
		ArrayList<float[][]> ycbcr = (ArrayList<float[][]>) RGB2YCvCr(img);
		float[][] y_mtx =  ycbcr.get(0);
		float[][] cb_mtx =  ycbcr.get(1);
		float[][] cr_mtx =  ycbcr.get(2);
		
		img.display();
		/*
		if(Original_Height % 8 != 0  || Original_Width % 8 != 0) {
			revertDimensions(img);
		}
		*/
		Image yimg = new Image(img.getW(),img.getH());
		Image cbimg = new Image(img.getW(),img.getH());
		Image crimg = new Image(img.getW(),img.getH());
		int[] pixel = new int[3];
		
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				pixel[0] =(int) y_mtx[x][y];
				pixel[1] =(int) y_mtx[x][y];
				pixel[2] =(int) y_mtx[x][y];
				
				yimg.setPixel(x, y, pixel);

				pixel[0] =(int) cb_mtx[x][y];
				pixel[1] =(int) cb_mtx[x][y];
				pixel[2] =(int) cb_mtx[x][y];

				cbimg.setPixel(x, y, pixel);

				pixel[0] =(int) cr_mtx[x][y];
				pixel[1] =(int) cr_mtx[x][y];
				pixel[2] =(int) cr_mtx[x][y];

				crimg.setPixel(x, y, pixel);
			}
		}
		yimg.display();
		//cbimg.display();
		//crimg.display();
		
		YCvCr2RGB(y_mtx, cb_mtx, cr_mtx);
	}

	public static void usage(){
		System.out.println("\nUsage: java CS4551_Main [input_ppm_file]\n");
	}
	public static Image resize(Image img) {
		
		int width = img.getW();
		int height = img.getH();
		Original_Width = width;
		Original_Height = height;
		
		width += 8 - width % 8;
		height += 8 - height % 8;
		int[] black = {0,0,0};
		int[] pixelValue = new int[3];
		
		Image resizedImage =  new Image(width,height);
		
		for(int x = 0; x < width; x++) {
			for(int y = 0; y < height; y++) {
				if( x < img.getW() && y < img.getH()) {
					img.getPixel(x, y, pixelValue);
					resizedImage.setPixel(x, y, pixelValue);
				}else {
					resizedImage.setPixel(x, y, black);
				}
			}
		}
		resizedImage.display();
		return resizedImage;
	}

	public static Image revertDimensions(Image img) {
		Image resize = new Image(Original_Width, Original_Height);
		int[] pixel = new int[3];
		for(int x = 0; x < Original_Width; x++) {
			for (int y = 0; y < Original_Height; y++) {
				img.getPixel(x, y, pixel);
				resize.setPixel(x, y, pixel);
			}
		}	
		resize.display();
		return resize;
	}
	//store YCvCr in 2d float array
	public static List<float[][]> RGB2YCvCr(Image img) {
		float Y = 0;
		float Cb = 0;
		float Cr = 0;
		float[][] y_chan = new float[img.getW()][img.getH()];
		float[][] cb_chan= new float[img.getW()][img.getH()];
		float[][] cr_chan = new float[img.getW()][img.getH()];	
		int[] rgb = new int[3];
		
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				img.getPixel(x, y, rgb);
				
				Y  = (float) (0.2990 * rgb[2] + 0.5870 * rgb[1] + 0.1140 * rgb[0]);
				Cb = (float) (-0.1687 * rgb[2] + -0.3313 * rgb[1] + 0.5000 * rgb[0]);
				Cr = (float) (0.5000 * rgb[2] + -0.4187 * rgb[1] + -0.0813 * rgb[0]);
				
				truncate(Y,Cb,Cr);
				Y -= 128;
				Cb -= 0.5;
				Cr -= 0.5;
				y_chan[x][y] = Y;
				cb_chan[x][y] = Cb;
				cr_chan[x][y] = Cr;
			}
		}
		
		List<float[][]> list = new ArrayList<>();
		list.add(y_chan);
		list.add(cb_chan);
		list.add(cr_chan);
		
		return list; 
	}
	
	public static Image YCvCr2RGB(float[][] Y, float[][] Cb, float[][] Cr) {
		Image img = new Image(Y.length, Y[0].length);
		int[] pixel = new int[3];
		int r,g,b;
		for(int x = 0; x < img.getW(); x++) {
			for(int y = 0; y < img.getH(); y++) {
				
				r = (int)((Y[x][y] + 128) + (1.402 * Cr[x][y]));
				g = (int)((Y[x][y] + 128) - (0.344 * Cb[x][y]) - (0.714*Cr[x][y]));
				b = (int)((Y[x][y] + 128) + (1.772 * Cb[x][y]));
				
				truncate(r);
				truncate(g);
				truncate(b);
				
				pixel[0] = b;
				pixel[1] = g;
				pixel[2] = r;
				
				img.setPixel(x, y, pixel);
			}
		}
		img.display();
		return img;
	}

	public static void truncate(float y,float cb,float cr){
		if(y < 0)
			y = 0;
		if(y > 255)
			y = 255;
		if(cb > 127.5)
			cb = (float) 127.5;
		if(cb < -127.5)
			cb = (float) -127.5;
		if(cr > 127.5)
			cr = (float) 127.5;
		if(cr < -127.5)
			cr = (float) -127.5;
	}
	public static void truncate(int num){
		if(num < 0)
			num = 0;
		if(num > 255)
			num = 255;
	}

	public static void dct(float[][] block) {
		float cu, cv, sumx =(float) 0.0, sumy =(float) 0.0;
		float[][] grid = new float[8][8];
		
		for(int u = 0; u < 8; u++) {
			if(u == 0) cu = (float) 0.70710678118;
			else cu = 1;

			for(int v = 0; v < 8; v++) {
			if(v == 0) cv = (float) 0.70710678118;
			else cv = 1;
				sumx = (float) 0.0;
				for(int x = 0; x < 8; x++) {
					sumy = (float) 0.0;
					for(int y = 0; y < 8; y++) {
						sumy += block[x][y] * (Math.cos((2 * (x + 1) * u * Math.PI )/16)) * (Math.cos((2 * (y + 1) * v * Math.PI )/16)); 
					}
					sumx += sumy;
				}
				grid[u][v] = (float) (0.25 * cu * cv * sumx);
			}
		}
	}
	public static void inverseDct(float[][] block) {
		float cu, cv, sumcv =(float) 0.0, sumcu =(float) 0.0;
		float[][] grid = new float[8][8];
		
		for(int x = 0; x < 8; x++) {
			for(int y = 0; y < 8; y++) {
				
				sumcu = (float) 0.0;	
				for(int u = 0; u < 8; u++) {
					if(u == 0) cu = (float) 0.70710678118;
					else cu = 1;
					
					sumcv = (float) 0.0;
					for(int v = 0; v < 8; v++) {
						if(v == 0) cv = (float) 0.70710678118;
						else cv = 1;
						
						sumcv += block[x][y] * cv * cv * (Math.cos((2 * (x + 1) * u * Math.PI )/16)) * (Math.cos((2 * (y + 1) * v * Math.PI )/16)); 
					}
					sumcu += sumcv;
				}
				grid[x][y] = (float) (0.25 * sumcu);
			}
		}
	}
	public float[][] subsample(float[][] channel){
		/* 
		 * averages by indexing to every other element of the matrix then
		 * summing that element and it's three neighbours and dividing by 4
		 * */
		float[][] sub = new float[channel.length / 4][channel[0].length / 4];
		int row = 0, col = 0;
		float avg = 0;
		for(int i = 0; i < channel.length - 1; i += 2) {
			for(int j = 0; j < channel[0].length - 1; j += 2) {
				
			}
		}
		return sub;
	}
}